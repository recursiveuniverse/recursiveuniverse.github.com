{"name":"Café au Life","body":"### Café au Life\r\n\r\nCafe au Life is an implementation of John Conway's [Game of Life][gol] cellular automata written in <a href=\"http://jashkenas.github.com/coffee-script/\">CoffeeScript</a>. Cafe au Life runs on <a href=\"http://nodejs.org\">Node.js</a>, it is not designed to run as an interactive program in a browser window.\r\n\r\n[gol]: http://en.wikipedia.org/wiki/Conway's_Game_of_Life\r\n\r\nThe <a href=\"http://recursiveuniverse.github.com/docs/cafeaulife.html\">annotated source code</a> is the best way to explore the algorithm.\r\n\r\n### Why should I care?\r\n\r\nCafé au Life implements Bill Gosper's <a href=\"http://en.wikipedia.org/wiki/Hashlife\">HashLife</a> algorithm. HashLife exploits regularity, so for certain life patterns, it runs at super-linear speed. As <a href=\"http://raganwald.posterous.com/a-beautiful-algorithm\">noted elsewhere</a>, if you set up Gosper's Glider Gun when the Earth was first formed 4.5 billion years ago, and ran one generation per second, in the 143.4 <em>quadrillion</em> seconds that have elapsed since then, the pattern would grow to 23,900,000,000,000,036 live cells. Cafe au Life takes just under two seconds to boot up, and another second to calculate the state of the pattern after 143.4 quadrillion generations.\r\n\r\nIf you haven't seen how the algorithm works, you owe it to yourself to read the <a href=\"http://recursiveuniverse.github.com/docs/cafeaulife.html\">annotated source code</a>.\r\n\r\n### How can I try it?\r\n\r\nThe easiest way to try Café au Life is to install CoffeeScript and node.js, clone the repository, then use the REPL from the command line:\r\n\r\n```\r\n$ coffee\r\ncoffee> Life = require('./lib/cafeaulife').set_universe_rules()\r\ncoffee> gun = require('./lib/menagerie').gospers_glider_gun\r\ncoffee> gun.future_at_time(143400000000000000).population\r\n23900000000000036\r\ncoffee>\r\n```\r\n\r\nHave fun!\r\n\r\n### Is it any good?\r\n\r\n<a href=\"http://news.ycombinator.com/item?id=3067434\">Yes</a>.\r\n\r\n### Why does Conway's Game of Life matter?\r\n\r\nOne of the most important questions we ask ourselves is whether a non-trivial machine can be constructed that reproduces itself. If the answer is \"no,\" then we can reason that for any machine, there must be a factory or creator outside of the machine. That goes for humans and all life. If the answer is \"yes,\" then we can reason that it is not <em>necessary</em> for there to be a factory or creator for every machine, including ourselves.\r\n\r\nCellular automata patterns are a kind of machine, with properties close enough to physical machines that it is very easy to reason by correspondence: If such-and-such is possible for a cellular automaton, it must be possible for a physical machine, therefore research into the capabilities of cellular automata is an important part of research into the capabilities of machines, including our bodies and our brains.\r\n\r\nLife theorists have proven all sorts of things about what ought to be possible with Life patterns. Life experimenters have taken it to the next level and have built Universal Turing Machines, self-replicating machines, and all sorts of things that demonstrate the universality of Conway's Game of Life. Implementations that can handle very large and/or very long-running Life patterns are an important tool for experimentation.\r\n\r\nIf you'd like to read more, the most approachable book on the subject is William Poundstone's brilliant <a href=\"http://www.amazon.com/gp/product/0809252023/ref=as_li_ss_il?ie=UTF8&amp;tag=raganwald001-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0809252023\">The Recursive Universe</a>. Beg, borrow, or steal a copy, new or used. Get it in hardcover while you still can.\r\n\r\n### What should I read next?\r\n\r\nThe <a href=\"http://recursiveuniverse.github.com/docs/cafeaulife.html\">annotated source code</a>.\r\n\r\n### Who's responsible for this?\r\n\r\n<a href=\"http://braythwayt.com\">Reg \"Raganwald\" Braithwaite</a> has authored libraries for Javascript and Ruby programming\r\nsuch as <a href=\"https://github.com/raganwald/Katy\">Katy</a>, <a href=\"http://github.com/raganwald/JQuery-Combinators\">JQuery Combinators</a>,\r\n<a href=\"https://github.com/raganwald/YouAreDaChef\">YouAreDaChef</a>, <a href=\"http://github.com/raganwald/andand\">andand</a>,\r\nand more you can find on <a href=\"https://github.com/raganwald\">Github</a>.\r\n\r\nHe has written three collections of essays:\r\n\r\n<ul>\r\n<li>\r\n<a href=\"http://leanpub.com/combinators\">Kestrels, Quirky Birds, and Hopeless Egocentricity</a>: <em>Raganwald's collected adventures in Combinatory Logic and Ruby Meta-Programming</em>\r\n</li>\r\n<li>\r\n<a href=\"http://leanpub.com/shippingsoftware\">What I've Learned From Failure</a>: <em>A quarter-century of experience shipping software, distilled into fixnum bittersweet essays</em>\r\n</li>\r\n<li><a href=\"http://leanpub.com/dowhatyoulove\">How to Do What You Love &amp; Earn What You’re Worth as a Programmer</a></li>\r\n</ul>\r\n\r\nHis hands-on coding blog <a href=\"https://github.com/raganwald/homoiconic\">Homoiconic</a> frequently lights up the Hackerverse, and he also writes about <a href=\"http://raganwald.posterous.com/\">project management and other subjects</a>.\r\n\r\n### Copyright and License\r\n\r\n(c) 2012 <b><a href=\"http://braythwayt.com\">Reg Braithwaite</a></b> (<a href=\"http://twitter.com/raganwald\">@raganwald</a>)\r\n\r\nCafé au Life is freely distributable under the terms of the <a href=\"http://en.wikipedia.org/wiki/MIT_License\">MIT license</a>.\r\n\r\n### Big thanks:\r\n\r\nThe annotated source code was generated directly from the <a href=\"http://recursiveuniverse.github.com/docs/cafeaulife.html\">original source</a> using <a href=\"http://jashkenas.github.com/docco/\">Docco</a>.","tagline":"Café au Life is an implementation of John Conway's Game of Life cellular automata using Bill Gosper's HashLife algorithm","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}